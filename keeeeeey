type Config struct {
	AWSAccessKeyID     string `yaml:"CAAS_UI_AWS_ACCESS_KEY_ID"`
	AWSSecretAccessKey string `yaml:"CAAS_UI_AWS_SECRET_ACCESS_KEY"`
	BaseURL            string `yaml:"BASE_URL"`
	AppEnv             string `yaml:"APP_ENV"`
}

---

// pkg/config/config.go
package config

import (
	"log"
	"os"
	"sync"
	
	"github.com/fsnotify/fsnotify"
	"gopkg.in/yaml.v3"
)

// (Aquí iría tu struct Config)
type Config struct { ... }

var (
	currentConfig Config
	configMutex   sync.RWMutex
)

// Init carga la configuración inicial y empieza a vigilar el archivo.
func Init(path string) {
	loadConfig(path)
	go watchConfigFile(path)
}

// Get devuelve la configuración actual de forma segura.
func Get() Config {
	configMutex.RLock()
	defer configMutex.RUnlock()
	return currentConfig
}

// (Aquí irían las funciones loadConfig y watchConfigFile)
func loadConfig(path string) { ... }
func loadConfig() {
	log.Println("Cargando/Recargando configuración desde", configPath)
	data, err := os.ReadFile(configPath)
	if err != nil {
		log.Printf("ERROR: No se pudo leer el archivo de configuración: %v", err)
		return
	}

	var newConfig Config
	if err := yaml.Unmarshal(data, &newConfig); err != nil {
		log.Printf("ERROR: No se pudo decodificar el YAML: %v", err)
		return
	}

	configMutex.Lock()
	currentConfig = newConfig
	configMutex.Unlock()

	log.Println("¡Configuración cargada/actualizada exitosamente!")
}


func watchConfigFile(path string) { ... }
func watchConfigFile() {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatalf("Error creating file watcher:: %v", err)
	}
	defer watcher.Close()

	if err := watcher.Add("/config"); err != nil {
		log.Fatalf("Error adding directory to watcher: %v", err)
	}

	log.Printf("Watching for changes in %s", configPath)

	for {
		select {
		case event, ok := <-watcher.Events:
			if !ok { return }
			if (event.Has(fsnotify.Write) || event.Has(fsnotify.Create)) && event.Name == configPath {
				loadConfig()
			}
		case err, ok := <-watcher.Errors:
			if !ok { return }
			log.Printf("Error del vigilante: %v", err)
		}
	}
}


func main() {
    // Simplemente inicializas la configuración
    config.Init("/etc/config/config.yaml")

    // Y cuando necesites un valor, lo pides
    // cfg := config.Get()
    // dbHost := cfg.Database.Host

    // ... resto de la lógica ...
}

Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
SHELL := powershell.exe -NoProfile -ExecutionPolicy Bypass -Command
