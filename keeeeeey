type Config struct {
	AWSAccessKeyID     string `yaml:"CAAS_UI_AWS_ACCESS_KEY_ID"`
	AWSSecretAccessKey string `yaml:"CAAS_UI_AWS_SECRET_ACCESS_KEY"`
	BaseURL            string `yaml:"BASE_URL"`
	AppEnv             string `yaml:"APP_ENV"`
}

---

// pkg/config/config.go
package config

import (
	"log"
	"os"
	"sync"
	
	"github.com/fsnotify/fsnotify"
	"gopkg.in/yaml.v3"
)

// (Aquí iría tu struct Config)
type Config struct { ... }

var (
	currentConfig Config
	configMutex   sync.RWMutex
)

// Init carga la configuración inicial y empieza a vigilar el archivo.
func Init(path string) {
	loadConfig(path)
	go watchConfigFile(path)
}

// Get devuelve la configuración actual de forma segura.
func Get() Config {
	configMutex.RLock()
	defer configMutex.RUnlock()
	return currentConfig
}

// (Aquí irían las funciones loadConfig y watchConfigFile)
func loadConfig(path string) { ... }
func loadConfig() {
	log.Println("Cargando/Recargando configuración desde", configPath)
	data, err := os.ReadFile(configPath)
	if err != nil {
		log.Printf("ERROR: No se pudo leer el archivo de configuración: %v", err)
		return
	}

	var newConfig Config
	if err := yaml.Unmarshal(data, &newConfig); err != nil {
		log.Printf("ERROR: No se pudo decodificar el YAML: %v", err)
		return
	}

	configMutex.Lock()
	currentConfig = newConfig
	configMutex.Unlock()

	log.Println("¡Configuración cargada/actualizada exitosamente!")
}


func watchConfigFile(path string) { ... }
func watchConfigFile() {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatalf("Error creating file watcher:: %v", err)
	}
	defer watcher.Close()

	if err := watcher.Add("/config"); err != nil {
		log.Fatalf("Error adding directory to watcher: %v", err)
	}

	log.Printf("Watching for changes in %s", configPath)

	for {
		select {
		case event, ok := <-watcher.Events:
			if !ok { return }
			if (event.Has(fsnotify.Write) || event.Has(fsnotify.Create)) && event.Name == configPath {
				loadConfig()
			}
		case err, ok := <-watcher.Errors:
			if !ok { return }
			log.Printf("Error del vigilante: %v", err)
		}
	}
}


func main() {
    // Simplemente inicializas la configuración
    config.Init("/etc/config/config.yaml")

    // Y cuando necesites un valor, lo pides
    // cfg := config.Get()
    // dbHost := cfg.Database.Host

    // ... resto de la lógica ...
}

Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
SHELL := powershell.exe -NoProfile -ExecutionPolicy Bypass -Command

---
package config

import (
	"os"
	"testing"
)

func TestInitAndGetCfg(t *testing.T) {

	// 1. Caso de Éxito: Cargar una configuración válida
	t.Run("Carga exitosa con YAML válido", func(t *testing.T) {
		// Contenido YAML que usaremos para la prueba
		yamlContent := `
server:
  host: "localhost"
  port: 8080
`
		// Crear un archivo temporal para la prueba
		tmpfile, err := os.CreateTemp("", "config-*.yaml")
		if err != nil {
			t.Fatalf("No se pudo crear el archivo temporal: %v", err)
		}
		// Asegurarse de que el archivo se elimine al final de la prueba
		defer os.Remove(tmpfile.Name())

		// Escribir el contenido YAML en el archivo temporal
		if _, err := tmpfile.Write([]byte(yamlContent)); err != nil {
			t.Fatalf("No se pudo escribir en el archivo temporal: %v", err)
		}
		tmpfile.Close()

		// Llamar a la función Init con la ruta de nuestro archivo temporal
		Init(tmpfile.Name())

		// Verificar que la configuración se cargó correctamente
		cfg := GetCfg()
		if cfg.Server.Host != "localhost" {
			t.Errorf("Se esperaba el host 'localhost', pero se obtuvo '%s'", cfg.Server.Host)
		}
		if cfg.Server.Port != 8080 {
			t.Errorf("Se esperaba el puerto 8080, pero se obtuvo '%d'", cfg.Server.Port)
		}
	})

	// 2. Caso de Error: Archivo no encontrado
	t.Run("Error cuando el archivo no existe", func(t *testing.T) {
		// Guardamos la configuración actual para asegurarnos de que no cambie
		configAntes := GetCfg()

		// Llamamos a Init con una ruta que sabemos que no existe
		Init("ruta/que/no/existe.yaml")

		configDespues := GetCfg()
		// Verificamos que la configuración global no fue modificada
		if configAntes.Server.Port != configDespues.Server.Port {
			t.Error("La configuración cambió incluso cuando el archivo no existía")
		}
	})

	// 3. Caso de Error: YAML inválido
	t.Run("Error con formato YAML inválido", func(t *testing.T) {
		// Guardamos la configuración actual
		configAntes := GetCfg()
		
		// Contenido con YAML malformado (un tabulador en lugar de espacios)
		invalidYaml := `server:\n\tport: 8080`

		tmpfile, err := os.CreateTemp("", "invalid-*.yaml")
		if err != nil {
			t.Fatalf("No se pudo crear el archivo temporal: %v", err)
		}
		defer os.Remove(tmpfile.Name())

		if _, err := tmpfile.Write([]byte(invalidYaml)); err != nil {
			t.Fatalf("No se pudo escribir en el archivo temporal: %v", err)
		}
		tmpfile.Close()

		Init(tmpfile.Name())

		// Verificamos que la configuración no haya sido alterada
		configDespues := GetCfg()
		if configAntes.Server.Port != configDespues.Server.Port {
			t.Error("La configuración cambió incluso con un YAML inválido")
		}
	})
}
